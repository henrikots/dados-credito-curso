divida <- c("alta", "alta")
garantias <- c("nenhuma", "adequada")
renda <- c("acima_35", "0_15")
#historia 1 : boa, alta, nenhuma, acima_35
historia <- c("boa", "ruim")
divida <- c("alta", "alta")
garantias <- c("nenhuma", "adequada")
renda <- c("acima_35", "0_15")
historia_1 <- data.frame(historia, divida, garantias, renda)
previsao_ad <- predict(classificador_ad, newdata = historia_1) #resultado = baixo
print(previsao_ad)
library(rpart)
base$clientid <- NULL
base <- read.csv("credit-data.csv")
base$clientid <- NULL
summary(base)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age <- ifelse(base$age < 0, 40.92, base$age)
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
base$default = factor(base$default, levels = c(0, 1), labels = c(0, 1))
divisao <- sample.split(base$default, SplitRatio = 0.75)
#dividir a base em treinamento e teste
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
library(caTools)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
classificador_ad_credit_data <- rpart(formula = default ~ ., base_treinamento)
previsoes_ad_credit_data <- predict(classificador_ad_credit_data, newdata = base_teste[-4])
print(previsoes_ad_credit_data)
previsoes_ad_credit_data <- predict(classificador_ad_credit_data, newdata = base_teste[-4], type = "class")
#cria uma matriz de confusao para fazer um comparativo
matriz_confusao = table(base_teste[, 4], previsoes_ad_credit_data) #93.6% de acerto
confusionMatrix(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
#basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
#basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
#basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
#basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
#basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
#basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
#basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
#basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#escalona as colunas que são numericas
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao == TRUE)
base_teste_c <- subset(basec, divisao == FALSE)
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
#basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
#basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
#basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
#basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
#basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
#basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
#basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
#basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#escalona as colunas que são numericas
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
View(basec)
classificador_ad_census <- rpart(formula = income ~ ., data = base_treinamento_c)
previsao_ad_census <- predict(classificador_ad_census, newdata = base_teste_c[-15])
previsao_ad_census <- predict(classificador_ad_census, newdata = base_teste_c[-15], type = "class")
matriz_confusao = table(base_teste_c[, 15], previsoes_ad_census)
matriz_confusao = table(base_teste_c[, 15], previsao_ad_census)
library(caret)
confusionMatrix(matriz_confusao)
poda = classificador_ad_census$cptable
poda
poda = classificador_ad_census$cptable[which(classificador_ad_census$cptable[, "xerror"]), "CP"]
poda = classificador_ad_census$cptable[which.min(classificador_ad_census$cptable[, "xerror"]), "CP"]
poda
prune(classificador_ad_census, 0.05)
classificador_poda <- prune(classificador_ad_census, 0.05)
previsao_poda <- predict(classificador_poda, newdata = base_teste_c[-15], type = "class")
matriz_confusao = table(base_teste_c[, 15], previsao_ad_census)
matriz_confusao = table(base_teste_c[, 15], previsao_poda)
confusionMatrix(matriz_confusao)
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
#basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
#basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
#basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
#basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
#basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
#basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
#basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
#basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#escalona as colunas que são numericas
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
library(rpart)
classificador_ad_census <- rpart(formula = income ~ ., data = base_treinamento_c)
previsao_ad_census <- predict(classificador_ad_census, newdata = base_teste_c[-15], type = "class")
matriz_confusao = table(base_teste_c[, 15], previsao_ad_census)
matriz_confusao
confusionMatrix(matriz_confusao)
poda = classificador_ad_census$cptable[which.min(classificador_ad_census$cptable[, "xerror"]), "CP"]
classificador_poda <- prune(classificador_ad_census, 0.05)
previsao_poda <- predict(classificador_poda, newdata = base_teste_c[-15], type = "class")
matriz_confusao = table(base_teste_c[, 15], previsao_poda)
confusionMatrix(matriz_confusao)
install.packages("randomForest")
#install.packages("randomForest")
library(randomForest)
classificador_rf <- randomForest(x = base_treinamento_c[-15], y = base_treinamento_c$income, ntree = 10)
previsoes_rf <- predict(classificador_rf, newdata = base_teste_c[-15])
previsoes_rf
matriz_confusao_rf = table(base_teste_c[, 15], previsoes_rf)
confusionMatrix(matriz_confusao_rf)
classificador_rf <- randomForest(x = base_treinamento_c[-15], y = base_treinamento_c$income, ntree = 15)
previsoes_rf <- predict(classificador_rf, newdata = base_teste_c[-15])
matriz_confusao_rf = table(base_teste_c[, 15], previsoes_rf)
confusionMatrix(matriz_confusao_rf) #84.53%
classificador_rf <- randomForest(x = base_treinamento_c[-15], y = base_treinamento_c$income, ntree = 20)
previsoes_rf <- predict(classificador_rf, newdata = base_teste_c[-15])
matriz_confusao_rf = table(base_teste_c[, 15], previsoes_rf)
confusionMatrix(matriz_confusao_rf) #10 = 84.53%, 15 = 85.23%,
base = read.csv("risco_credito.csv")
install.packages("OneR")
base = read.csv("risco-credito.csv")
#install.packages("OneR")
library(OneR)
classificador = OneR(x = base)
View(classificador)
#install.packages("OneR")
library(OneR)
classificador <- OneR(base)
print(classificador)
#historia 1 : boa, alta, nenhuma, acima_35
historia <- c("boa", "ruim")
divida <- c("alta", "alta")
garantias <- c("nenhuma", "adequada")
renda <- c("acima_35", "0_15")
historia_1 <- data.frame(historia, divida, garantias, renda)
previsao_ad <- predict(classificador, newdata = historia_1)
previsao_or <- predict(classificador, newdata = historia_1)
print(previsao_or)
library(rpart)
library(caTools)
base <- read.csv("credit-data.csv")
base$clientid <- NULL
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
#transforma o classificador default em factor
base$default = factor(base$default, levels = c(0, 1), labels = c(0, 1))
divisao <- sample.split(base$default, SplitRatio = 0.75)
#dividir a base em treinamento e teste
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
install.packages("RoughSets")
#install.packages("RoughSets")
library(RoughSets)
dt_treinamento = SF.asDecisionTable(dataset = base_treinamento, decision.attr = 4)
dt_teste = SF.asDecisionTable(dataset = base_teste, decision.attr = 4)
View(dt_teste)
View(dt_treinamento)
classificador <- RI.CN2Rules.RST(dt_treinamento, k = 5)
'discretização, criar faixas de valores parao uso no algoritmo
classificador <- RI.CN2Rules.RST(dt_treinamento, k = 5)
base <- read.csv("credit-data.csv")
base$clientid <- NULL
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
base <- read.csv("credit-data.csv")
base$clientid <- NULL
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
a
csac
sacasc
#
''
''
base <- read.csv("credit-data.csv")
base$clientid <- NULL
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
divisao <- sample.split(base$default, SplitRatio = 0.75)
#dividir a base em treinamento e teste
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
View(base_teste)
View(base_treinamento)
dt_treinamento = SF.asDecisionTable(dataset = base_treinamento, decision.attr = 4)
dt_teste = SF.asDecisionTable(dataset = base_teste, decision.attr = 4)
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_treinamento = SF.asDecisionTable(dataset = base_treinamento, decision.attr = 4)
dt_teste = SF.asDecisionTable(dataset = base_teste, decision.attr = 4)
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_teste = SF.applyDecTable(dt_teste, intervalos)
dt_treinamento = SF.applyDecTable(dt_treinamento, intervalos)
View(dt_treinamento)
classificador <- RI.CN2Rules.RST(dt_treinamento, k = 5)
dt_treinamento = SF.asDecisionTable(dataset = base_treinamento, decision.attr = 4)
dt_teste = SF.asDecisionTable(dataset = base_teste, decision.attr = 4)
'discretização, criar faixas de valores parao uso no algoritmo'
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_treinamento = SF.applyDecTable(dt_treinamento, intervalos)
dt_teste = SF.applyDecTable(dt_teste, intervalos)
classificador <- RI.CN2Rules.RST(dt_treinamento, k = 5)
classificador <- RI.CN2Rules.RST(dt_treinamento, k = 5)
classificador <- RI.CN2Rules.RST(dt_treinamento)
classificador <- RI.CN2Rules.RST(dt_treinamento, K = 5)
print(classificador)
previsoes <- predict(classificador, newdata = dt_teste[-4])
previsoes
matriz_confusao <- table(base_teste_c[,4], previsoes)
matriz_confusao <- table(base_teste[,4], previsoes)
matriz_confusao <- table(dt_teste[,4], previsoes)
matriz_confusao <- table(dt_teste[,4], unlist(previsoes))
confusionMatrix(matriz_confusao)
library(caret)
basec <- read.csv("census.csv")
View(basec)
basec <- basec[-1]
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.05)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
library(RoughSets)
dt_treinamento <- SF.asDecisionTable(dataset = base_treinamento_c, decision.attr = 15)
dt_teste <- SF.asDecisionTable(dataset = base_teste_c, decision.attr = 15)
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_treinamento = SF.applyDecTable(dt_treinamento, intervalos)
dt_treinamento = SF.applyDecTable(dt_teste, intervalos)
classificador = RI.CN2Rules.RST(dt_treinamento, K = 1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.05)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_treinamento = SF.applyDecTable(dt_treinamento, intervalos)
dt_teste = SF.applyDecTable(dt_teste, intervalos)
dt_treinamento <- SF.asDecisionTable(dataset = base_treinamento_c, decision.attr = 15)
dt_teste <- SF.asDecisionTable(dataset = base_teste_c, decision.attr = 15)
intervalos = D.discretization.RST(dt_treinamento, nOfIntervals = 4)
dt_treinamento = SF.applyDecTable(dt_treinamento, intervalos)
dt_teste = SF.applyDecTable(dt_teste, intervalos)
classificador = RI.CN2Rules.RST(dt_treinamento, K = 1)
previsoes <- predict(classificador, dt_teste[-15])
matriz_confusao <- table(dt_teste[, 15], previsoes)
matriz_confusao <- table(dt_teste[, 15], unlist(previsoes))
library(caret)
confusionMatrix(matriz_confusao)
base <- read.csv("credit-data.csv")
base$clientid <- NULL
library(caTools)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
install.packages('class')
install.packages("class")
#install.packages('class')
library(class)
previsoes = knn(train = base_treinamento[,-4], teste = base_teste[,4], cl = base_treinamento[, 4], k = 5)
previsoes = knn(train = base_treinamento[,-4], teste = base_teste[,-4], cl = base_treinamento[, 4], k = 5)
previsoes = knn(train = base_treinamento[,-4], test = base_teste[,-4], cl = base_treinamento[, 4], k = 5)
previsoes = knn(train = base_treinamento[, -4])
previsoes = knn(train = base_treinamento[, -4], test = base_teste[, -4])
previsoes = knn(train = base_treinamento[, -4], test = base_teste[, -4],)
base <- read.csv("credit-data.csv")
#remove a coluna cliente
base$clientid <- NULL
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
#install.packages('class')
library(class)
previsoes = knn(train = base_treinamento[, -4], test = base_teste[, -4],)
previsoes = knn(train = base_treinamento[, -4], test = base_teste[, -4], cl = base_treinamento$default, k = 5)
previsoes
matriz_confusao = table(base_teste$default, previsoes)
library(caret)
confusionMatrix(matriz_confusao)
base <- read.csv("credit-data.csv")
#remove a coluna cliente
base$clientid <- NULL
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
#install.packages("caTools")
library(caTools)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
#install.packages('class')
library(class)
previsoes = knn(train = base_treinamento[, -4], test = base_teste[, -4], cl = base_treinamento$default, k = 5)
matriz_confusao = table(base_teste$default, previsoes)
confusionMatrix(matriz_confusao) #sem escalonamento #83.4%
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
library(class)
previsoes <- knn(train = base_treinamento_c[, -15], test = base_teste_c[, -15], cl = base_treinamento_c$income, k = 5)
matriz_confusao = table(base_teste_c$income, previsoes)
library(caret)
confusionMatrix(matriz_confusao)
base <- read.csv("risco-credito.csv")
base <- base[base$risco != "Moderado",]
View(base)
base <- base[base$risco != "moderado",]
#utilizar o pacote já presente no R
classificador = glm(formula = risco ~ ., family = binomial, data = base)
classificador
#historia 1 : boa, alta, nenhuma, acima_35
historia <- c("boa", "ruim")
divida <- c("alta", "alta")
garantias <- c("nenhuma", "adequada")
renda <- c("acima_35", "0_15")
historia_1 <- data.frame(historia, divida, garantias, renda)
probabilidades <- predict(classificador, type = 'response', newdata = historia_1)
probabilidades
View(base)
respostas <- ifelse(probabilidades > 0.5, "baixa", "alta")
respostas
base <- read.csv("credit-data.csv")
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
install.packages("caTools")
library(caTools)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
base <- read.csv("credit-data.csv")
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
install.packages("caTools")
library(caTools)
set.seed(1)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
install.packages("caTools")
#classificador do algoritmo de regressao logistica
classificador <- glm(formula = default ~ ., family = binomial, data = base_treinamento )
classificador
probabilidades <- predict(classificador, type = "response", newdata = base_teste[, -4])
probabilidades <- predict(classificador, type = "response", newdata = base_teste[-4])
probabilidades
previsoes <- ifelse(probabilidades > 0.5, 1, 0)
previsoes
matriz_confusao <- table(base_teste[4], previsoes)
probabilidades <- predict(classificador, type = "response", newdata = base_teste[, -4])
previsoes <- ifelse(probabilidades > 0.5, 1, 0)
matriz_confusao <- table(base_teste[4], previsoes)
matriz_confusao <- table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
matriz_confusao <- table(base_teste[,4], previsoes)
confusionMatrix(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
#basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
#basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
#basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
#basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
#basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
#basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
#basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
#basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#escalona as colunas que são numericas
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
#classificador do algoritmo de regressao logistica
classificador <- glm(formula = income ~ ., family = binomial, data = base_treinamento_c )
probabilidades <- predict(classificador, type = "response", newdata = base_teste_c[, -15])
previsoes <- ifelse(probabilidades > 0.5, 1, 0)
matriz_confusao <- table(base_teste[,14], previsoes)
matriz_confusao <- table(base_teste_c[,14], previsoes)
matriz_confusao <- table(base_teste_c[,15], previsoes)
library(caret)
confusionMatrix(matriz_confusao) #95%
