base <- read.csv("credit.csv")
setwd("C:\Users\Henrique\Documents\Projeto\R\machine_learning\curso_ML")
setwd("C:/Users/Henrique/Documents/Projeto/R/machine_learning/curso_ML")
base <- read.csv("credit.csv")
base <- read.csv("credit-data.csv")
View(base)
base$clientid <- null
base$clientid <- NULL
summary(base)
base[base$age < 0]
base[base$age < 0,]
base[base$age < 0 & !is.na(base$age),]
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
base[base$agr > 0, 2]
base[base$agr > 0, 1]
base[base$agr, na.rm = TRUE]
base[base$age, na.rm = TRUE]
mean(base$age, na.rm = TRUE)
mean(base$age, na.rm = FALSE)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age <- ifelse(base$agr < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
mean(base$age[base$age > 0], na.rm = TRUE)
base$age <- ifelse(base$age < 0, mean(base$age[base$age > 0], na.rm = TRUE), base$age)
setwd("C:/Users/Henrique/Documents/Projeto/R/machine_learning/curso_ML")
base <- read.csv("credit-data.csv")
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0]
base$age <- ifelse(base$age < 0, 40.92, na.rm = TRUE), base$age)
base$age <- ifelse(base$age < 0, 40.92, base$age)
setwd("C:/Users/Henrique/Documents/Projeto/R/machine_learning/curso_ML")
base <- read.csv("credit-data.csv")
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
base$age <- ifelse(base$age < 0, 40.92, base$age)
?na.rm
basec <- read.csv("census.csv")
basec[-1]
basec <- basec[-1]
View(basec)
#busca os valores categoricos existentes na coluna
table(basec$sex)
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
table(basec$workclass)
a <- table(basec$workclass)
a
a <- unique(basec$workclass)
a
length(unique(basec$workclass))
basecc$workclass <- factor(basec$sex, levels = unique(basec$workclass), labels = c(1:length(unique(basec$workclass))))
basec$workclass <- factor(basec$sex, levels = unique(basec$workclass), labels = c(1:length(unique(basec$workclass))))
a <- unique(basec$workclass)
a
basec <- read.csv("census.csv")
basec <- basec[-1]
basec$workclass <- factor(basec$sex, levels = c(unique(basec$workclass)), labels = c(1:length(unique(basec$workclass))))
unique(basec$workclass)
basec <- read.csv("census.csv")
unique(basec$workclass)
basec$workclass <- factor(basec$workclass, levels = c(unique(basec$workclass)), labels = c(1:length(unique(basec$workclass))))
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = c(unique(basec$workclass)), labels = c(1:length(unique(basec$workclass))))
basec$workclass <- factor(basec$workclass, levels = c(unique(basec$workclass)), labels = c(1:7))
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = c(unique(basec$workclass)), labels = c(1:7))
basec <- read.csv("census.csv")
basec[which(!duplicated(basec$workclass))]
basec$workclass[which(!duplicated(basec$workclass))]
basec$workclass <- factor(basec$workclass, levels = basec$workclass[which(!duplicated(basec$workclass))], labels = c(1:7))
unique(basec$workclass)
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:7))
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:7))
basec <- read.csv("census.csv")
View(basec)
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:7))
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:length( unique(basec$workclass))))
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:length( unique(basec$workclass))))
basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:length( unique(basec$education))))
basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:length( unique(basec$marital.status))))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(1:length( unique(basec$ocupation))))
basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:length( unique(basec$relationship))))
basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:length( unique(basec$race))))
basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:length( unique(basec$native.country))))
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
#troca os atributos de texto por numeros
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
basec <- read.csv("census.csv")
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(1:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 2)))
basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:ifelse(length(unique(basec$income)) > 2, length(unique(basec$income)), 2)))
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(0:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 2)))
basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:ifelse(length(unique(basec$income)) > 2, length(unique(basec$income)), 2)))
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(1:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 2)))
basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:ifelse(length(unique(basec$income)) > 2, length(unique(basec$income)), 2)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(0:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 1)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(0:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 1)))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(0,1))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(0,1))
unique(basec$occupation)
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$ocupation <- factor(basec$ocupation, levels = unique(basec$ocupation), labels = c(1:ifelse(length(unique(basec$ocupation)) > 2, length(unique(basec$ocupation)), 2)))
unique(basec$ocupation)
basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de texto por numeros
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de texto por numeros
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
str(basec$income)
str(basec$income) == factor
is.factor(basec$income)
is.numeric(basec$income)
is.numeric(basec)
basec[,Filter(is.numeric, .SD)]
which(sapply(basec,is.numeric))
basec <- scale(basec)
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
?sapply()
install.packages("caTools")
library(caTools)
?set.seed()
set.seed(1)
divisao <- sample.split(base$default)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao = TRUE)
base_treinamento <- subset(base, divisao == TRUE)
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
install.packages("caTools")
library(caTools)
set.seed(1)
install.packages("caTools")
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$default, SplitRatio = 0.85)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao == TRUE)
base_teste_c <- subset(base_c, divisao == FALSE)
base_teste_c <- subset(basec, divisao == FALSE)
setwd("~/Projeto/R/dados-credito-curso/curso_ML")
base_nb <- read.csv("risco_credito.csv")
base_nb <- read.csv("risco-credito.csv")
#instalar o pacoto com o algoritmo do naive-bayes
install.packages("e1071")
library(e1071)
classificador = naiveBayes(x = base_nb[1:5], y = base_nb$risco)
View(classificador)
classificador_nb = naiveBayes(x = base_nb[1:5], y = base_nb$risco)
rm(classificador)
rm(a)
View(base_nb)
historia_1 <- data.frame(historia, divida, garantias, renda)
historia <- c("boa")
divida <- c("alta")
garantias <- c("nenhuma")
renda <- c("acima_35")
historia_1 <- data.frame(historia, divida, garantias, renda)
previsao_nb <- predict(classificador_nb, newdata = historia_1)
previsao_nb
historia <- c("ruim")
divida <- c("alta")
garantias <- c("adequada")
renda <- c("0_15")
historia <- c("ruim")
divida <- c("alta")
garantias <- c("adequada")
renda <- c("0_15")
historia_2 <- data.frame(historia, divida, garantias, renda)
previsao_nb <- predict(classificador_nb, newdata = historia_2) #resultado = baixo
previsao_nb
print(previsao_nb)
previsao_nb <- predict(classificador_nb, newdata = historia_2, "raw") #resultado = alto
print(previsao_nb)
library(e1071)
base <- read.csv("credit-data.csv")
library(e1071)
library(caTools)
set.seed(1)
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
classificador_nb_credit_data <- naiveBayes(x = base_treinamento[-4], y = base_treinamento[4])
base <- read.csv("credit-data.csv")
library(e1071)
library(caTools)
set.seed(1)
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
divisao <- sample.split(base$default, SplitRatio = 0.75)
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
classificador_nb_credit_data <- naiveBayes(x = base_treinamento[-4], y = base_treinamento[4])
classificador_nb_credit_data <- naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes_nb_credit_data <- predict(classificador_nb_credit_data, newdata = base_teste[-4])
previsoes_nb_credit_data
str(base)
base$default = factor(base$default, levels = c(0, 1), labels = c(0, 1))
base <- read.csv("credit-data.csv")
library(e1071)
library(caTools)
set.seed(1)
base$clientid <- NULL
summary(base)
idade_invalida <- base[base$age < 0 & !is.na(base$age),]
mean(base$age[base$age > 0], na.rm = TRUE)
#ajustar base inconsistente com média do valor
base$age <- ifelse(base$age < 0, 40.92, base$age)
#ajusta valores faltantes com a média
base$age <- ifelse(is.na(base$age), mean(base$age, na.rm = TRUE) ,base$age)
#normalização
# x = (x - min(x)) / (max(x) - min(x))
#padronização - mais recomendado por tratar os outliers
# x = (x - media(x)) / (desvio_padrao(x))
base[, 1:3] <- scale(base[, 1:3])
#transforma o classificador default em factor
base$default = factor(base$default, levels = c(0, 1), labels = c(0, 1))
divisao <- sample.split(base$default, SplitRatio = 0.75)
#dividir a base em treinamento e teste
base_treinamento <- subset(base, divisao == TRUE)
base_teste <- subset(base, divisao == FALSE)
classificador_nb_credit_data <- naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes_nb_credit_data <- predict(classificador_nb_credit_data, newdata = base_teste[-4])
#cria uma matriz de confusao para fazer um comparativo
matriz_confusao = table(base_teste[, 4], previsoes_nb_credit_data)
matriz_confusao
install.packages("carots")
install.packages("caret")
library(caret)
confusionMatrix(matriz_confusao)
basec <- read.csv("census.csv")
basec <- basec[-1]
#busca os valores categoricos existentes na coluna
table(basec$sex)
#troca os atributos de categoricos por numericos
basec$sex <- factor(basec$sex, levels = c(" Female", " Male"), labels = c(0, 1))
#basec$workclass <- factor(basec$workclass, levels = unique(basec$workclass), labels = c(1:ifelse(length(unique(basec$workclass)) > 2, length(unique(basec$workclass)), 2)))
#basec$education <- factor(basec$education, levels = unique(basec$education), labels = c(1:ifelse(length(unique(basec$education)) > 2, length(unique(basec$education)), 2)))
#basec$marital.status <- factor(basec$marital.status, levels = unique(basec$marital.status), labels = c(1:ifelse(length(unique(basec$marital.status)) > 2, length(unique(basec$marital.status)), 2)))
#basec$occupation <- factor(basec$occupation, levels = unique(basec$occupation), labels = c(1:ifelse(length(unique(basec$occupation)) > 2, length(unique(basec$occupation)), 2)))
#basec$relationship <- factor(basec$relationship, levels = unique(basec$relationship), labels = c(1:ifelse(length(unique(basec$relationship)) > 2, length(unique(basec$relationship)), 2)))
#basec$race <- factor(basec$race, levels = unique(basec$race), labels = c(1:ifelse(length(unique(basec$race)) > 2, length(unique(basec$race)), 2)))
#basec$native.country <- factor(basec$native.country, levels = unique(basec$native.country), labels = c(1:ifelse(length(unique(basec$native.country)) > 2, length(unique(basec$native.country)), 2)))
#basec$income <- factor(basec$income, levels = unique(basec$income), labels = c(1:length( unique(basec$income))))
basec$workclass = factor(basec$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$education = factor(basec$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
basec$marital.status = factor(basec$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
basec$occupation = factor(basec$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
basec$relationship = factor(basec$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
basec$race = factor(basec$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
basec$native.country = factor(basec$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
basec$income = factor(basec$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
#escalona as colunas que são numericas
basec[which(sapply(basec,is.numeric))] <- scale(basec[which(sapply(basec,is.numeric))])
library(caTools)
set.seed(1)
divisao_c <- sample.split(basec$income, SplitRatio = 0.85)
base_treinamento_c <- subset(basec, divisao == TRUE)
base_teste_c <- subset(basec, divisao == FALSE)
base_treinamento_c <- subset(basec, divisao_c == TRUE)
base_teste_c <- subset(basec, divisao_c == FALSE)
library(e1071)
View(base_teste_c)
classificador_nb_census <- naiveBayes(x <- base_treinamento_c[-15], y <- base_treinamento_c[15])
classificador_nb_census <- naiveBayes(x <- base_treinamento_c[-15], y <- base_treinamento_c$income)
print(classificador_nb_census)
previsoes_nb_census <- predict(classificador_nb_census, base_teste_c[-15])
previsoes_nb_census <- predict(classificador_nb_census, newdata =  base_teste_c[-15])
matriz_confusao_nb_census <- table(base_teste_c[15], previsoes_nb_census)
matriz_confusao_nb_census <- table(base_teste_c[,15], previsoes_nb_census)
confusionMatrix(matriz_confusao_nb_census)
